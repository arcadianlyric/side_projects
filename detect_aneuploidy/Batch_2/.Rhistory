}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='1','sample2'='2'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <- input$samples
plot(runif(samples))
# tmp <- depth1[73538:79451, samples]
# tmp <- data.frame(cbind(seq(1,length(tmp)), tmp))
# colnames(tmp) <- c('loc', 'read')
# tmp <- tmp[complete.cases(tmp),]
# ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("sam", label='Select a sample',c('sample1'='1','sample2'='2'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <- input$sam
plot(runif(samples))
# tmp <- depth1[73538:79451, samples]
# tmp <- data.frame(cbind(seq(1,length(tmp)), tmp))
# colnames(tmp) <- c('loc', 'read')
# tmp <- tmp[complete.cases(tmp),]
# ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("chr", label='Select a sample',c('sample1'='1','sample2'='2'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <- input$chr
plot(runif(samples))
# tmp <- depth1[73538:79451, samples]
# tmp <- data.frame(cbind(seq(1,length(tmp)), tmp))
# colnames(tmp) <- c('loc', 'read')
# tmp <- tmp[complete.cases(tmp),]
# ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
#### select XY ####
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("chromosome", label='Select a sample',c('sam1'='1','sam2'='2'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$chromosome
tmp <- depth1[73538:79451 ,samples]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("chromosome", label='Select a sample',c('sam1'='1','sam2'='2'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
chr <-  input$chromosome
tmp <- depth1[73538:79451 ,chr]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
colnames(depth1)=='Sample.1'
colnames(depth1)
colnames(depth1)=='Sample.11'
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("chromosome", label='Select a sample',c('sam1'='Sample.01','sam2'='Sample.02'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
chr <-  input$chromosome
tmp <- depth1[73538:79451 ,(colnames(depth1)==chr)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("chromosome", label='Select a sample',c('sam1'='Sample.01','sam6'='Sample.06'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
chr <-  input$chromosome
tmp <- depth1[73538:79451 ,(colnames(depth1)==chr)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample6'='Sample.06'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample6'='Sample.06'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'),
p("This", a(href="http://shiny.rstudio.com/", "Shiny"),
"application visualize data from the read depth file and let you explore information for chromosomal regions."))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
mainPanel(
plotOutput('distPlot'),
p("This", a(href="http://shiny.rstudio.com/", "Shiny"),
"application visualize data from the read depth file and let you explore information for chromosomal regions.")
),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
interval1 = read.csv('Interval_order.csv', header = T)[73538:79451,]
depth1= read.csv('Depth.csv', header=T)[73538:79451,]
ui <- fluidPage(
mainPanel(
plotOutput('distPlot'),
p("This", a(href="http://shiny.rstudio.com/", "Shiny"),
"application visualize data from the read depth file and let you explore information for chromosomal regions.")
),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotOutput('distPlot')
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
dev.off()
ui <- fluidPage(
plotOutput('distPlot'),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
depth1= read.csv('Depth.csv', header=T)
interval1 = read.csv('Interval_order.csv', header = T)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[73538:79451 ,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
plotlyOutput("distPlot"),
sidebarPanel(
checkboxGroupInput("samples", label='Select a sample',c('sample1'='Sample.01','sample2'='Sample.02','sample3'='Sample.03','sample4'='Sample.04','sample5'='Sample.05','sample6'='Sample.06','sample7'='Sample.07','sample8'='Sample.08','sample9'='Sample.09','sample10'='Sample.10','sample11'='Sample.11','sample12'='Sample.12','sample13'='Sample.13','sample14'='Sample.14','sample15'='Sample.15','sample16'='Sample.16','sample17'='Sample.17','sample18'='Sample.18','sample19'='Sample.19','sample20'='Sample.20','sample21'='Sample.21','sample22'='Sample.22','sample23'='Sample.23','sample24'='Sample.24'))
)
)
# set server
server <- function(input, output) {
output$distPlot <- renderPlotly({
samples <-  input$samples
tmp <- depth1[,(colnames(depth1)==samples)]
tmp  <- data.frame(cbind(seq(1,length(tmp)), tmp))
colnames(tmp) <- c('loc', 'read')
tmp <- tmp[complete.cases(tmp),]
ggplot(tmp, aes(loc, read)) + geom_line()
})
}
# run app
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
rm(list=ls())
shinyApp(ui = ui, server = server)
getwd()
runApp()
rm(list=ls())
getwd()
runApp()
plot((SMA(depth[,i], n=1000), col="blue"))
plot(SMA(depth[,i], n=1000))
depth=depth1
ls()
setwd('/Users/YC/github/ds/Phosphorus Data Challenge/Batch_2')
depth = read.csv('Depth.csv', header = T)
interval = read.csv('Interval_order.csv', header = T)
plot(SMA(depth[,i], n=1000))
i=1
plot(SMA(depth[,i], n=1000))
plot(SMA(depth[,i], n=1000), lwd=0.1)
plot(SMA(depth[,i], n=1000), lwd=0.1, type='l')
plot(SMA(depth[,i], n=1000), lwd=0.5, type='l')
plot(SMA(depth[,i], n=1000), type='l')
?plot
write.table(copy, file='estimated-xy-copy.txt', sep='\t', quote=F, row.names = T)
copy <- get.copy(depth)
ls()
depth = read.csv('Batch_2/Depth.csv', header = T)
setwd('/Users/YC/Desktop/Phosphorus Data Challenge')
depth = read.csv('Batch_2/Depth.csv', header = T)
interval = read.csv('Batch_2/Interval_order.csv', header = T)
avg <-  colMeans(depth[1:(which(interval$Chrom==23)[1]-1),], na.rm=T)
avg.x <- colMeans(depth[(which(interval$Chrom==23)[1]):(which(interval$Chrom==24)[1]),], na.rm=T)
avg.y <-  colMeans(depth[(which(interval$Chrom==24)[1]-1):dim(interval)[1],], na.rm=T)
copy.x <-  round(avg.x/ avg, digit=2)/0.5
copy.y <-  round(avg.y/ avg, digit=2)/0.5
copy <-  data.frame(copy.x, copy.y)
write.table(copy, file='estimated-xy-copy.txt', sep='\t', quote=F, row.names = T)
copy$id <- rownames(copy)
write.table(copy, file='estimated-xy-copy.txt', sep='\t', quote=F, row.names = F)
copy <- copy[,c(3,1,2)]
d
write.table(copy, file='estimated-xy-copy.txt', sep='\t', quote=F, row.names = F)
setwd('/Users/YC/Desktop/Phosphorus Data Challenge/Batch_1')
runApp()
setwd('/Users/YC/Desktop/Phosphorus Data Challenge')
runApp()
getwd()
runApp()
getwd()
interval1 = read.csv('Batch_2/Interval_order.csv', header = T)
depth1= read.csv('Batch_2/Depth.csv', header=T)[(which(interval1$Chrom==24)[1]):dim(interval1)[1], ]
ls()
rm(list=ls())
interval1 = read.csv('Batch_2/Interval_order.csv', header = T)
depth1= read.csv('Batch_2/Depth.csv', header=T)[(which(interval1$Chrom==24)[1]):dim(interval1)[1], ]
save.image(file='data.rda')
rm(list=ls())
getwd()
runApp()
ls()
load('data.rda')
head(interval1)
interval=interval1
rm(interval1)
depth=depth1
rm(depth1)
save.image(file='data.rda')
dim(depth)
dim(interval)
length(interval[(which(interval$Chrom==24)[1]):dim(interval)[1],2])
runApp()
tail(interval)
runApp()
runApp()
setwd('/Users/YC/Desktop/Phosphorus Data Challenge/Batch_1')
rm(list=ls())
depth = read.csv('Depth.csv', header = T)
interval = read.csv('Interval_order.csv', header = T)
avg <-  colMeans(depth[1:(which(interval$Chrom==23)[1]-1),], na.rm=T)
# get average read depth for X, Y
avg.x <- colMeans(depth[(which(interval$Chrom==23)[1]):(which(interval$Chrom==24)[1]-1),], na.rm=T)
avg.y <-  colMeans(depth[(which(interval$Chrom==24)[1]):dim(interval)[1],], na.rm=T)
# calculate fold change for chr X, Y, divide by 0.5 because chr 1-22 are diploidy
copy.x <-  round(avg.x/ avg, digit=2)/0.5
copy.y <-  round(avg.y/ avg, digit=2)/0.5
copy <-  data.frame(copy.x, copy.y)
copy$id <- rownames(copy)
copy <- copy[,c(3,1,2)]
write.table(copy, file='estimated-xy-copy.txt', sep='\t', quote=F, row.names = F)
rm(list=ls())
getwd()
setwd(/Users/YC/Desktop/Phosphorus Data Challenge)
setwd('/Users/YC/Desktop/Phosphorus Data Challenge')
runApp()
ls()
setwd('/Users/YC/Desktop/Phosphorus Data Challenge/Batch_2')
depth = read.csv('Depth.csv', header = T)
interval = read.csv('Interval_order.csv', header = T)
hist(depth[1:(which(interval$Chrom==23)[1]-1),])
hist(depth[1:(which(interval$Chrom==23)[1]-1),1])
hist(log(depth[1:(which(interval$Chrom==23)[1]-1),1]))
hist(log2(depth[1:(which(interval$Chrom==23)[1]-1),1]))
hist(depth[1:(which(interval$Chrom==23)[1]-1),1], breaks=100)
library(preprocessCore)
library(affy)
source("http://bioconductor.org/workflows.R")
workflowInstall("arrays")
library(affy)
source("https://bioconductor.org/biocLite.R")
biocLite("affy")
library(affy)
library(limma)
celfiles <- system.file("extdata", package="arrays")
head(celfiles)
celfiles
eset <- justRMA(phenoData=phenoData,
celfile.path=celfiles)
phenoData <-
read.AnnotatedDataFrame(system.file("extdata", "pdata.txt",
package="arrays"))
eset <- justRMA(phenoData=phenoData,
celfile.path=celfiles)
class(eset)
eset
ls()
rm(list=ls())
